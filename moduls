# from django.db import models
# from django.conf import settings
# from django.utils import timezone
#
#
# class Vehicle(models.Model):
#     VEHICLE_TYPES = [
#         ('TENTED', 'Tented Truck'),
#         ('REFRIGERATED', 'Refrigerated Truck'),
#         ('FLATBED', 'Flatbed Truck'),
#         ('BOX', 'Box Truck'),
#     ]
#
#     STATUS_CHOICES = [
#         ('AVAILABLE', 'Available'),
#         ('IN_TRANSIT', 'In Transit'),
#         ('MAINTENANCE', 'Maintenance'),
#     ]
#
#     user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
#     name = models.CharField(max_length=100)
#     vehicle_type = models.CharField(max_length=20, choices=VEHICLE_TYPES)
#     license_plate = models.CharField(max_length=20)
#     load_capacity_kg = models.PositiveIntegerField()
#     load_capacity_volume = models.PositiveIntegerField(help_text="In cubic meters")
#     equipment = models.TextField(blank=True)
#     status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='AVAILABLE')
#     created_at = models.DateTimeField(auto_now_add=True)
#
#     def __str__(self):
#         return f"{self.name} ({self.license_plate})"
#
# class Cargo(models.Model):
#     CARGO_TYPES = [
#         ('ELECTRONICS', 'Electronics'),
#         ('TEXTILE', 'Textile'),
#         ('FOOD', 'Food'),
#         ('MACHINERY', 'Machinery'),
#         ('OTHER', 'Other'),
#     ]
#
#     cargo_number = models.CharField(max_length=20, unique=True)
#     cargo_type = models.CharField(max_length=20, choices=CARGO_TYPES)
#     description = models.TextField(blank=True)
#     weight_kg = models.PositiveIntegerField()
#     volume_m3 = models.DecimalField(max_digits=10, decimal_places=2)
#
#     def __str__(self):
#         return f"{self.cargo_number} - {self.get_cargo_type_display()}"
#
#
# class Location(models.Model):
#     name = models.CharField(max_length=100)
#     country = models.CharField(max_length=100)
#     region = models.CharField(max_length=100, blank=True)
#
#     def __str__(self):
#         return self.name
#
#
# class Order(models.Model):
#     STATUS_CHOICES = [
#         ('DRAFT', 'Draft'),
#         ('PENDING', 'Pending'),
#         ('ACTIVE', 'Active'),
#         ('COMPLETED', 'Completed'),
#         ('CANCELLED', 'Cancelled'),
#     ]
#
#     order_number = models.CharField(max_length=20, unique=True)
#     user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
#     cargo = models.ForeignKey(Cargo, on_delete=models.PROTECT)
#     origin = models.ForeignKey(Location, on_delete=models.PROTECT, related_name='origin_orders')
#     destination = models.ForeignKey(Location, on_delete=models.PROTECT, related_name='destination_orders')
#     pickup_date = models.DateField()
#     delivery_date = models.DateField()
#     vehicle_requirements = models.TextField(blank=True)
#     incoterms = models.CharField(max_length=50, blank=True)
#     additional_notes = models.TextField(blank=True)
#     status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='DRAFT')
#     created_at = models.DateTimeField(auto_now_add=True)
#     updated_at = models.DateTimeField(auto_now=True)
#
#     def __str__(self):
#         return f"Order #{self.order_number}"
#
#
# class Tender(models.Model):
#     STATUS_CHOICES = [
#         ('PENDING', 'Pending'),
#         ('ACTIVE', 'Active'),
#         ('COMPLETED', 'Completed'),
#         ('CANCELLED', 'Cancelled'),
#     ]
#
#     tender_number = models.CharField(max_length=20, unique=True)
#     order = models.OneToOneField(Order, on_delete=models.CASCADE)
#     status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='PENDING')
#     start_date = models.DateTimeField(auto_now_add=True)
#     end_date = models.DateTimeField()
#     min_bid_amount = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
#
#     def __str__(self):
#         return f"Tender #{self.tender_number}"
#
#
# class Bid(models.Model):
#     STATUS_CHOICES = [
#         ('PENDING', 'Pending'),
#         ('ACCEPTED', 'Accepted'),
#         ('REJECTED', 'Rejected'),
#         ('WITHDRAWN', 'Withdrawn'),
#     ]
#
#     tender = models.ForeignKey(Tender, on_delete=models.CASCADE)
#     bidder = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
#     vehicle = models.ForeignKey(Vehicle, on_delete=models.PROTECT)
#     amount = models.DecimalField(max_digits=12, decimal_places=2)
#     proposed_delivery_date = models.DateField()
#     notes = models.TextField(blank=True)
#     status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='PENDING')
#     created_at = models.DateTimeField(auto_now_add=True)
#
#     def __str__(self):
#         return f"Bid #{self.id} for Tender #{self.tender.tender_number}"
#
#
# class Notification(models.Model):
#     NOTIFICATION_TYPES = [
#         ('SYSTEM', 'System Notification'),
#         ('TENDER', 'New Tender'),
#         ('OFFER', 'Offer Received'),
#         ('AWARD', 'Tender Awarded'),
#         ('DEADLINE', 'Deadline Approaching'),
#     ]
#
#     user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
#     notification_type = models.CharField(max_length=20, choices=NOTIFICATION_TYPES)
#     title = models.CharField(max_length=200)
#     message = models.TextField()
#     related_tender = models.ForeignKey(Tender, on_delete=models.SET_NULL, null=True, blank=True)
#     related_bid = models.ForeignKey(Bid, on_delete=models.SET_NULL, null=True, blank=True)
#     is_read = models.BooleanField(default=False)
#     created_at = models.DateTimeField(auto_now_add=True)
#
#     def __str__(self):
#         return f"{self.get_notification_type_display()} - {self.title}"
#
#
# class UserProfile(models.Model):
#     user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
#     company_name = models.CharField(max_length=100, blank=True)
#     phone_number = models.CharField(max_length=20, blank=True)
#     address = models.TextField(blank=True)
#     tax_id = models.CharField(max_length=50, blank=True)
#     vehicle_fleet_size = models.PositiveIntegerField(default=0)
#     rating = models.DecimalField(max_digits=3, decimal_places=2, default=0.0)
#
#     def __str__(self):
#         return f"{self.user.username}'s Profile"
